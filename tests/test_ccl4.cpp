#include <cvx.hpp>
#include <assert.h>
#include <iterator>
#include <type_traits>

int main() {
    const int width = 25;
    const int height = 9;

    int input[][25] = { {1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
                        {0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0},
                        {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0},
                        {0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0},
                        {0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0},
                        {0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} };

    const int expected[][25] = { {1, 0, 0 , 0 , 0 , 0, 2, 2, 2, 0, 0, 0, 0, 0, 0 , 0, 0, 0, 3 , 3 , 0 , 0, 0, 0, 0},
                                 {0, 4, 0 , 0 , 0 , 0, 2, 2, 2, 0, 0, 0, 0, 0, 0 , 0, 0, 0, 3 , 0 , 5 , 0, 0, 0, 0},
                                 {0, 0, 0 , 0 , 0 , 0, 0, 0, 0, 0, 0, 0, 6, 6, 6 , 6, 6, 0, 3 , 3 , 0 , 0, 0, 7, 0},
                                 {0, 0, 0 , 8 , 0 , 0, 0, 0, 0, 0, 0, 0, 6, 0, 0 , 0, 6, 0, 0 , 0 , 0 , 0, 0, 7, 0},
                                 {0, 0, 8 , 8 , 8 , 0, 0, 9, 9, 9, 0, 0, 6, 0, 10, 0, 6, 0, 11, 11, 0 , 0, 7, 7, 0},
                                 {0, 0, 0 , 8 , 0 , 0, 9, 9, 9, 9, 0, 0, 6, 0, 0 , 0, 6, 0, 0 , 11, 11, 0, 7, 7, 0},
                                 {0, 0, 12, 0 , 12, 0, 0, 0, 0, 9, 0, 0, 6, 6, 6 , 6, 6, 0, 0 , 0 , 0 , 0, 0, 0, 0},
                                 {0, 0, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0, 0, 0, 0 , 0 , 0 , 0, 0, 0, 0},
                                 {0, 0, 12, 0 , 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0, 0, 0, 0 , 0 , 0 , 0, 0, 0, 0} };

    auto input_begin = std::begin(input[0]);
    auto input_end = std::end(input[height - 1]);
    auto expected_begin = std::begin(expected[0]);

    try {
        auto ccs = cvx::label_connected_components(input_begin,
                                                   input_end,
                                                   width,
                                                   height,
                                                   4,
                                                   1,
                                                   0);

        assert(ccs == 12);
        assert(std::equal(input_begin, input_end, expected_begin));
    } catch (cvx::exception& ex) {
        std::cerr << "Error: " << ex.what() << std::endl;
        return 1;
    }

    return 0;
}
